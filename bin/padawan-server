#!/usr/bin/env php
<?php

set_time_limit(0);
ini_set('memory_limit', '2048M');
ini_set('xdebug.max_nesting_level', '9000');
ini_set('display_errors', 'stderr');

use React\Http\Response;
use React\Http\Request;
use Padawan\Framework\Application\HTTP\App;

$autoloaders = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../autoload.php'
];

foreach ($autoloaders as $autoloader) {
    if (file_exists($autoloader)) {
        define("AUTOLOAD_PATH", $autoloader);
        break;
    }
}

require(AUTOLOAD_PATH);

$noFsIO = false;
$port = 15155;

foreach ($argv as $arg) {
    if ($arg === '--no-io') {
        $noFsIO = true;
    } elseif (strpos($arg, '=') !== false) {
        list($name, $value) = explode('=', $arg);
        if ($name === '--port') {
            $port = $value;
        } elseif ($name === '--host') {
            $host = $value;
        }
    }
}

$app = new App($noFsIO);
$handler = function ($request, Response $response) use ($app) {
    $start = microtime(1);
    printf("%s %s\n", $request->getMethod(), $request->getPath());
    if($request->getMethod() !== 'POST'){
        $app->setResponseHeaders($response);
        $response->end('');
        return;
    }
    $headers = $request->getHeaders();
    $body = new \stdClass;
    $body->data = "";
    $body->receivedLength = 0;
    $body->dataLength = $headers['Content-Length'];
    $request->on("data", function ($data) use (
        $request,
        $response,
        $app,
        $body,
        $start
    ) {
        $body->data .= $data;
        $body->receivedLength += strlen($data);
        if($body->receivedLength >= $body->dataLength){
            $response->end($app->handle($request, $response, $body->data));
            printf("Response time: %s\n", microtime(1) - $start);
        }
    });
};

$loop = React\EventLoop\Factory::create();
$socket = new React\Socket\Server($loop);
$http = new React\Http\Server($socket);

$http->on('request', $handler);

$socket->listen($port);

echo "Started http server on 127.0.0.1:{$port}\n";

$loop->run();
