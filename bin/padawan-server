#!/usr/bin/env php
<?php

use Padawan\Framework\Application\Socket as App;
use Padawan\Framework\Application\Socket\SocketOutput;

set_time_limit(0);
ini_set('memory_limit', '2048M');
ini_set('xdebug.max_nesting_level', '9000');
ini_set('display_errors', 'stderr');

if (function_exists("cli_set_process_title")) {
    @cli_set_process_title("padawan-server");
}

$autoloaders = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/vendor/autoload.php',
    __DIR__ . '/../autoload.php'
];

foreach ($autoloaders as $autoloader) {
    if (file_exists($autoloader)) {
        define("AUTOLOAD_PATH", $autoloader);
        break;
    }
}

require(AUTOLOAD_PATH);

$port = 15155;

Amp\run(function() use ($port) {
    $socket = Amp\Socket\listen("tcp://0.0.0.0:" . $port);
    $server = new Amp\Socket\Server($socket);
    $app = new App();
    printf("Started padawan server on %d\n", $port);
    while ($client = (yield $server->accept())) {
        Amp\resolve(onClient($client, $app));
    }
});

// Generator coroutine is a lightweight "thread" for each client
function onClient(Amp\Socket\Client $client, App $app) {
    $startedAt = microtime(true);
    /** @var $client \Amp\Socket\Client */
    $clientId = $client->id();
    echo "+ connected: {$clientId}\n";
    $content = (yield $client->read());
    $request = json_decode($content);
    $output = new SocketOutput($client);
    try {
        yield from $app->handle($request, $output);
    } catch (\Throwable $e) {
        yield $output->write(json_encode([
            "error" => $e->getMessage()
        ]));
    }
    if ($client->alive()) {
        yield $client->close();
    }
    $totalTime = microtime(true) - $startedAt;
    echo "- disconnected {$clientId} after {$totalTime}\n";
}
